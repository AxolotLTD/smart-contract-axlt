/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../common";
import type {
  ExchangeRate,
  ExchangeRateInterface,
} from "../../contracts/ExchangeRate";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [],
    name: "getExchangeRate",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "rateIncrement",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "rateIncrementMap",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052670de0b6b3a7640000600155670de0b6b3a76400006002556207a12060035534801561002f57600080fd5b5061003933610106565b60046020526207a1207fabd6e7cb50984ff9c2f3e18a2660c3353dadf4e3291deeb275dae2cd1e44fe05556203d0907f56751dd9534a4025520708fb24b7b0d243a2b8aeda2c1c014349d4820461947c556202dc6c7f63ef1a4e38a23a766f1ee077c11a96273dc27deffabf05c012ab92b5ea18a43655620225517e63e080ee38b707ae7fcf5eebd0a60dbbd5978f0aeadb985d564e5695755985556136b16000526201e8487fa7173c9c8888e7911936458de32ee817ea0eb243bf7577b66507c7dd086275f855610156565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b61029e806101656000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c806339b6727c146100675780635ec1cc541461009a578063715018a6146100a35780638da5cb5b146100ad578063e6aa216c146100c8578063f2fde38b146100d0575b600080fd5b61008761007536600461021f565b60046020526000908152604090205481565b6040519081526020015b60405180910390f35b61008760035481565b6100ab6100e3565b005b6000546040516001600160a01b039091168152602001610091565b600154610087565b6100ab6100de366004610238565b6100f7565b6100eb610175565b6100f560006101cf565b565b6100ff610175565b6001600160a01b0381166101695760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b610172816101cf565b50565b6000546001600160a01b031633146100f55760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610160565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006020828403121561023157600080fd5b5035919050565b60006020828403121561024a57600080fd5b81356001600160a01b038116811461026157600080fd5b939250505056fea26469706673582212202dd4d14d0b818cc6ce10d0692b60b73e3aa70bab06ed84dba4479830d731b9e964736f6c63430008120033";

type ExchangeRateConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ExchangeRateConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ExchangeRate__factory extends ContractFactory {
  constructor(...args: ExchangeRateConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      ExchangeRate & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): ExchangeRate__factory {
    return super.connect(runner) as ExchangeRate__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ExchangeRateInterface {
    return new Interface(_abi) as ExchangeRateInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): ExchangeRate {
    return new Contract(address, _abi, runner) as unknown as ExchangeRate;
  }
}
