/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface AXLTInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "activateAndBindSponsor"
      | "activeAccounts"
      | "additionToLiquidity"
      | "allowance"
      | "approve"
      | "axltContractAddress"
      | "balanceOf"
      | "balanceOfNonPayable"
      | "balanceOfPayable"
      | "buyLine"
      | "buyToken"
      | "countTransaction"
      | "decimals"
      | "decreaseAllowance"
      | "depositLimit"
      | "depositLimitMap"
      | "getCountTransaction"
      | "getDepositLimit"
      | "getExchangeRate"
      | "getInitialExchangeRate"
      | "getPriceLine"
      | "getTokenForUsdt"
      | "increaseAllowance"
      | "isTransferable"
      | "name"
      | "nonPayableBalance"
      | "owner"
      | "ownerFeeForToken"
      | "payableBalance"
      | "profitCalculation"
      | "rateIncrement"
      | "rateIncrementMap"
      | "renounceOwnership"
      | "setOnTransferable"
      | "sponsorMap"
      | "symbol"
      | "totalLiquidity"
      | "totalSupply"
      | "transfer"
      | "transferContractsOwnership"
      | "transferFrom"
      | "transferOwnership"
      | "userLine"
      | "withdrawTokens"
      | "withdrawUsdt"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ActivateAccount"
      | "AddToLiquidity"
      | "Approval"
      | "BindSponsor"
      | "BuyLine"
      | "BuyToken"
      | "OwnershipTransferred"
      | "Transfer"
      | "Withdrawn"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "activateAndBindSponsor",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "activeAccounts",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "additionToLiquidity",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "axltContractAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfNonPayable",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfPayable",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "buyLine", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "buyToken",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "countTransaction",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "depositLimitMap",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCountTransaction",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDepositLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getExchangeRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getInitialExchangeRate",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPriceLine",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenForUsdt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isTransferable",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nonPayableBalance",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerFeeForToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "payableBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "profitCalculation",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "rateIncrement",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rateIncrementMap",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setOnTransferable",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "sponsorMap",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalLiquidity",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferContractsOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userLine",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawUsdt",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "activateAndBindSponsor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "activeAccounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "additionToLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "axltContractAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfNonPayable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfPayable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buyLine", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buyToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "countTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositLimitMap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCountTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDepositLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getExchangeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInitialExchangeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPriceLine",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenForUsdt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTransferable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nonPayableBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ownerFeeForToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "payableBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "profitCalculation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rateIncrement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rateIncrementMap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOnTransferable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sponsorMap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferContractsOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userLine", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawUsdt",
    data: BytesLike
  ): Result;
}

export namespace ActivateAccountEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AddToLiquidityEvent {
  export type InputTuple = [recipient: AddressLike, amount: BigNumberish];
  export type OutputTuple = [recipient: string, amount: bigint];
  export interface OutputObject {
    recipient: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    spender: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [owner: string, spender: string, value: bigint];
  export interface OutputObject {
    owner: string;
    spender: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BindSponsorEvent {
  export type InputTuple = [child: AddressLike, sponsor: AddressLike];
  export type OutputTuple = [child: string, sponsor: string];
  export interface OutputObject {
    child: string;
    sponsor: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BuyLineEvent {
  export type InputTuple = [recipient: AddressLike, lineLevel: BigNumberish];
  export type OutputTuple = [recipient: string, lineLevel: bigint];
  export interface OutputObject {
    recipient: string;
    lineLevel: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BuyTokenEvent {
  export type InputTuple = [recipient: AddressLike, amount: BigNumberish];
  export type OutputTuple = [recipient: string, amount: bigint];
  export interface OutputObject {
    recipient: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, value: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawnEvent {
  export type InputTuple = [recipient: AddressLike, amount: BigNumberish];
  export type OutputTuple = [recipient: string, amount: bigint];
  export interface OutputObject {
    recipient: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface AXLT extends BaseContract {
  connect(runner?: ContractRunner | null): AXLT;
  waitForDeployment(): Promise<this>;

  interface: AXLTInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  activateAndBindSponsor: TypedContractMethod<
    [sponsor: AddressLike],
    [void],
    "nonpayable"
  >;

  activeAccounts: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  additionToLiquidity: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  allowance: TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;

  approve: TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  axltContractAddress: TypedContractMethod<[], [string], "view">;

  balanceOf: TypedContractMethod<[account: AddressLike], [bigint], "view">;

  balanceOfNonPayable: TypedContractMethod<[], [bigint], "view">;

  balanceOfPayable: TypedContractMethod<[], [bigint], "view">;

  buyLine: TypedContractMethod<[], [boolean], "nonpayable">;

  buyToken: TypedContractMethod<
    [usdtAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  countTransaction: TypedContractMethod<[], [bigint], "view">;

  decimals: TypedContractMethod<[], [bigint], "view">;

  decreaseAllowance: TypedContractMethod<
    [spender: AddressLike, subtractedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  depositLimit: TypedContractMethod<[], [bigint], "view">;

  depositLimitMap: TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;

  getCountTransaction: TypedContractMethod<[], [bigint], "view">;

  getDepositLimit: TypedContractMethod<[], [bigint], "view">;

  getExchangeRate: TypedContractMethod<[], [bigint], "view">;

  getInitialExchangeRate: TypedContractMethod<
    [_owner: AddressLike],
    [bigint],
    "view"
  >;

  getPriceLine: TypedContractMethod<
    [lineNumber: BigNumberish],
    [bigint],
    "view"
  >;

  getTokenForUsdt: TypedContractMethod<
    [amount: BigNumberish],
    [bigint],
    "view"
  >;

  increaseAllowance: TypedContractMethod<
    [spender: AddressLike, addedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  isTransferable: TypedContractMethod<[], [boolean], "view">;

  name: TypedContractMethod<[], [string], "view">;

  nonPayableBalance: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  ownerFeeForToken: TypedContractMethod<[], [bigint], "view">;

  payableBalance: TypedContractMethod<[], [bigint], "view">;

  profitCalculation: TypedContractMethod<
    [_owner: AddressLike],
    [bigint],
    "view"
  >;

  rateIncrement: TypedContractMethod<[], [bigint], "view">;

  rateIncrementMap: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setOnTransferable: TypedContractMethod<
    [condition: boolean],
    [void],
    "nonpayable"
  >;

  sponsorMap: TypedContractMethod<[arg0: AddressLike], [string], "view">;

  symbol: TypedContractMethod<[], [string], "view">;

  totalLiquidity: TypedContractMethod<[], [bigint], "view">;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  transfer: TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferContractsOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  transferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  userLine: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  withdrawTokens: TypedContractMethod<[], [void], "nonpayable">;

  withdrawUsdt: TypedContractMethod<
    [currency: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "activateAndBindSponsor"
  ): TypedContractMethod<[sponsor: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "activeAccounts"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "additionToLiquidity"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "allowance"
  ): TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "axltContractAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "balanceOfNonPayable"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "balanceOfPayable"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "buyLine"
  ): TypedContractMethod<[], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "buyToken"
  ): TypedContractMethod<[usdtAmount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "countTransaction"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "decimals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "decreaseAllowance"
  ): TypedContractMethod<
    [spender: AddressLike, subtractedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "depositLimit"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "depositLimitMap"
  ): TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "getCountTransaction"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getDepositLimit"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getExchangeRate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getInitialExchangeRate"
  ): TypedContractMethod<[_owner: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getPriceLine"
  ): TypedContractMethod<[lineNumber: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTokenForUsdt"
  ): TypedContractMethod<[amount: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "increaseAllowance"
  ): TypedContractMethod<
    [spender: AddressLike, addedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isTransferable"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "nonPayableBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ownerFeeForToken"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "payableBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "profitCalculation"
  ): TypedContractMethod<[_owner: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "rateIncrement"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "rateIncrementMap"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setOnTransferable"
  ): TypedContractMethod<[condition: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "sponsorMap"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "totalLiquidity"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transfer"
  ): TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferContractsOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "userLine"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "withdrawTokens"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawUsdt"
  ): TypedContractMethod<
    [currency: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "ActivateAccount"
  ): TypedContractEvent<
    ActivateAccountEvent.InputTuple,
    ActivateAccountEvent.OutputTuple,
    ActivateAccountEvent.OutputObject
  >;
  getEvent(
    key: "AddToLiquidity"
  ): TypedContractEvent<
    AddToLiquidityEvent.InputTuple,
    AddToLiquidityEvent.OutputTuple,
    AddToLiquidityEvent.OutputObject
  >;
  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "BindSponsor"
  ): TypedContractEvent<
    BindSponsorEvent.InputTuple,
    BindSponsorEvent.OutputTuple,
    BindSponsorEvent.OutputObject
  >;
  getEvent(
    key: "BuyLine"
  ): TypedContractEvent<
    BuyLineEvent.InputTuple,
    BuyLineEvent.OutputTuple,
    BuyLineEvent.OutputObject
  >;
  getEvent(
    key: "BuyToken"
  ): TypedContractEvent<
    BuyTokenEvent.InputTuple,
    BuyTokenEvent.OutputTuple,
    BuyTokenEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;
  getEvent(
    key: "Withdrawn"
  ): TypedContractEvent<
    WithdrawnEvent.InputTuple,
    WithdrawnEvent.OutputTuple,
    WithdrawnEvent.OutputObject
  >;

  filters: {
    "ActivateAccount(address)": TypedContractEvent<
      ActivateAccountEvent.InputTuple,
      ActivateAccountEvent.OutputTuple,
      ActivateAccountEvent.OutputObject
    >;
    ActivateAccount: TypedContractEvent<
      ActivateAccountEvent.InputTuple,
      ActivateAccountEvent.OutputTuple,
      ActivateAccountEvent.OutputObject
    >;

    "AddToLiquidity(address,uint256)": TypedContractEvent<
      AddToLiquidityEvent.InputTuple,
      AddToLiquidityEvent.OutputTuple,
      AddToLiquidityEvent.OutputObject
    >;
    AddToLiquidity: TypedContractEvent<
      AddToLiquidityEvent.InputTuple,
      AddToLiquidityEvent.OutputTuple,
      AddToLiquidityEvent.OutputObject
    >;

    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "BindSponsor(address,address)": TypedContractEvent<
      BindSponsorEvent.InputTuple,
      BindSponsorEvent.OutputTuple,
      BindSponsorEvent.OutputObject
    >;
    BindSponsor: TypedContractEvent<
      BindSponsorEvent.InputTuple,
      BindSponsorEvent.OutputTuple,
      BindSponsorEvent.OutputObject
    >;

    "BuyLine(address,uint256)": TypedContractEvent<
      BuyLineEvent.InputTuple,
      BuyLineEvent.OutputTuple,
      BuyLineEvent.OutputObject
    >;
    BuyLine: TypedContractEvent<
      BuyLineEvent.InputTuple,
      BuyLineEvent.OutputTuple,
      BuyLineEvent.OutputObject
    >;

    "BuyToken(address,uint256)": TypedContractEvent<
      BuyTokenEvent.InputTuple,
      BuyTokenEvent.OutputTuple,
      BuyTokenEvent.OutputObject
    >;
    BuyToken: TypedContractEvent<
      BuyTokenEvent.InputTuple,
      BuyTokenEvent.OutputTuple,
      BuyTokenEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;

    "Withdrawn(address,uint256)": TypedContractEvent<
      WithdrawnEvent.InputTuple,
      WithdrawnEvent.OutputTuple,
      WithdrawnEvent.OutputObject
    >;
    Withdrawn: TypedContractEvent<
      WithdrawnEvent.InputTuple,
      WithdrawnEvent.OutputTuple,
      WithdrawnEvent.OutputObject
    >;
  };
}
